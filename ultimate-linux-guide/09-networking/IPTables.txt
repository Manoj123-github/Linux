
# 🛡️ **iptables Firewall Management Guide**

---

## 1. Basics: What is iptables?

* Linux command-line tool for configuring the **netfilter** firewall.
* Works by defining rules in **tables** and **chains** to filter network traffic.
* Powerful but requires careful management.

---

## 2. Enable / Disable Firewall with iptables

> iptables itself is a tool, not a service, so enabling/disabling means managing the rules or the service that restores rules.

### Disable firewall (flush all rules temporarily):


sudo iptables -F        # Flush all chains (remove all rules)
sudo iptables -X        # Delete user-defined chains
sudo iptables -t nat -F # Flush NAT table rules
sudo iptables -t nat -X # Delete NAT user-defined chains

*Note: This disables filtering but the firewall “service” might still be active.*

### Enable firewall:

* Define your rules explicitly (see below).
* To have firewall active on boot, save and restore rules.

---

## 3. Check Current iptables Rules

sudo iptables -L -n -v          # List all filter table rules with counts
sudo iptables -t nat -L -n -v   # Show NAT table rules


---

## 4. Adding Firewall Rules

### Allow inbound SSH (port 22)

sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT

### Allow inbound HTTP (port 80)

sudo iptables -A INPUT -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT


### Allow inbound HTTPS (port 443)

sudo iptables -A INPUT -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT


### Allow loopback traffic

sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A OUTPUT -o lo -j ACCEPT

### Accept related/established traffic (important)

sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


---

## 5. Removing Firewall Rules

* iptables rules are executed in order, so removing a specific rule requires identifying it by line number.

### List rules with line numbers:

sudo iptables -L --line-numbers


### Delete a rule by line number (e.g., line 3 in INPUT chain):

sudo iptables -D INPUT 3


---

## 6. Set Default Policies

Default policies apply if no rules match.

sudo iptables -P INPUT DROP
sudo iptables -P FORWARD DROP
sudo iptables -P OUTPUT ACCEPT

---

## 7. Port Forwarding with iptables

Forward traffic from one port/interface to another port/interface or IP.

### Forward port 80 (http) to 8080 locally:

sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080


### Forward port 22 on public interface to port 2222 on local machine:


sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 22 -j REDIRECT --to-port 2222

### Forward port 80 to another IP address (192.168.1.100 port 80):

sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 192.168.1.100:80
sudo iptables -A FORWARD -p tcp -d 192.168.1.100 --dport 80 -j ACCEPT

---

## 8. Masquerading (NAT)

For sharing your server’s public IP with an internal network.

### Enable IP forwarding (kernel level):

sudo sysctl -w net.ipv4.ip_forward=1


To make permanent, edit `/etc/sysctl.conf` and add:

net.ipv4.ip_forward = 1


### Masquerade outgoing traffic on interface `eth0`:

sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE


---

## 9. Save and Restore iptables Rules

### Save current rules to file (Debian/Ubuntu):

sudo iptables-save > /etc/iptables/rules.v4


### Restore rules from file:

sudo iptables-restore < /etc/iptables/rules.v4


### Automatically restore rules at boot:

* Install `iptables-persistent` package:

sudo apt-get install iptables-persistent


* It loads rules from `/etc/iptables/rules.v4` on boot.

---

## 10. Useful Commands

| Task                       | Command Example                                      |
| -------------------------- | ---------------------------------------------------- |
| List all rules             | `sudo iptables -L -n -v`                             |
| Flush all rules            | `sudo iptables -F`                                   |
| Set default policy to DROP | `sudo iptables -P INPUT DROP`                        |
| Add rule to accept SSH     | `sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT` |
| Save rules                 | `sudo iptables-save > /etc/iptables/rules.v4`        |
| Restore rules              | `sudo iptables-restore < /etc/iptables/rules.v4`     |

---

## Important Notes

* **Order matters**: iptables processes rules top to bottom.
* Always keep an active SSH session before applying restrictive rules.
* Test changes carefully to avoid locking yourself out.
* Use `conntrack` module to allow established connections for smoother experience.

---

If you want, I can prepare example scripts or common scenarios (e.g., basic web server firewall config). Just ask!
