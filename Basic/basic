
---

### **1. `pwd` (Print Working Directory)**  
**Description**: Shows the absolute path of the current directory.  
**Attributes**:  
- `-P`: Displays the physical path (resolves symbolic links).  

**Use Case**: Identify your current directory location.  
**Example**:  
```bash
pwd       # Output: /home/user/documents
pwd -P    # Resolves symlinks (e.g., if in a linked directory)
```

---

### **2. `cd` (Change Directory)**  
**Description**: Navigate between directories.  
**Attributes**:  
- `cd ~` or `cd`: Go to the home directory.  
- `cd ..`: Move up one directory.  
- `cd -`: Switch to the previous directory.  

**Use Case**: Move to a specific directory.  
**Example**:  
```bash
cd /var/log   # Navigate to /var/log
cd ..         # Go back to /var
cd -          # Return to the previous directory
```

---

### **3. `ls` (List Directory Contents)**  
**Description**: List files and directories.  
**Attributes**:  
- `-l`: Long format (details).  
- `-a`: Show hidden files (starts with `.`).  
- `-h`: Human-readable file sizes (e.g., KB, MB).  
- `-R`: Recursive listing.  
- `-t`: Sort by modification time.  

**Use Case**: View files in a directory.  
**Example**:  
```bash
ls -la       # Show all files (including hidden) in long format
ls -lh /etc  # List files in /etc with readable sizes
```

---

### **4. `less` (View File Content)**  
**Description**: View files page by page.  
**Attributes**:  
- `/pattern`: Search forward.  
- `?pattern`: Search backward.  
- `-N`: Show line numbers.  
- `-i`: Case-insensitive search.  

**Use Case**: Read large files without opening an editor.  
**Example**:  
```bash
less /var/log/syslog   # View syslog
less +F file.log       # Follow real-time updates (like `tail -f`)
```

---

### **5. `date` (Display or Set System Date/Time)**  
**Description**: Show or configure the system date/time.  
**Attributes**:  
- `+FORMAT`: Custom format (e.g., `+%Y-%m-%d`).  
- `-s`: Set the system time (requires root).  

**Use Case**: Check the current date/time.  
**Example**:  
```bash
date                         # Output: Tue Jul 25 14:30:00 UTC 2023
date "+%Y-%m-%d %H:%M:%S"   # Output: 2023-07-25 14:30:00
```

---

### **6. `cp` (Copy Files/Directories)**  
**Description**: Copy files or directories.  
**Attributes**:  
- `-r`: Recursive (for directories).  
- `-i`: Prompt before overwriting.  
- `-v`: Verbose output.  

**Use Case**: Duplicate a file or directory.  
**Example**:  
```bash
cp file.txt backup.txt      # Copy a file
cp -r dir1 dir2             # Copy a directory recursively
```

---

### **7. `file` (Determine File Type)**  
**Description**: Identify a file’s type (e.g., text, binary).  
**Attributes**: None specific.  

**Use Case**: Check if a file is a script, image, etc.  
**Example**:  
```bash
file /bin/ls    # Output: ELF executable (binary)
file notes.txt  # Output: ASCII text
```

---

### **8. `man` (Manual Pages)**  
**Description**: Display documentation for commands.  
**Attributes**:  
- `man -k <keyword>`: Search manuals by keyword.  

**Use Case**: Learn how a command works.  
**Example**:  
```bash
man ls      # Show the manual for `ls`
man 2 open  # Show the "open" system call documentation
```

---

### **9. `mkdir` (Create Directory)**  
**Description**: Create new directories.  
**Attributes**:  
- `-p`: Create parent directories if missing.  
- `-v`: Verbose output.  

**Use Case**: Organize files into folders.  
**Example**:  
```bash
mkdir projects          # Create a directory
mkdir -p dir1/dir2/dir3 # Create nested directories
```

---

### **10. `mv` (Move/Rename Files)**  
**Description**: Move or rename files/directories.  
**Attributes**:  
- `-i`: Prompt before overwriting.  
- `-v`: Verbose output.  

**Use Case**: Rename a file or move it to another location.  
**Example**:  
```bash
mv old.txt new.txt      # Rename a file
mv file.txt ~/backup/   # Move to another directory
```

---

### **11. `cat` (Concatenate Files)**  
**Description**: Display or combine file content.  
**Attributes**:  
- `-n`: Add line numbers.  
- `-E`: Show `$` at end of lines.  

**Use Case**: View or merge files.  
**Example**:  
```bash
cat file.txt            # Display content
cat file1.txt file2.txt > combined.txt  # Merge files
```

---

### **12. `rm` (Remove Files/Directories)**  
**Description**: Delete files or directories.  
**Attributes**:  
- `-r`: Recursive deletion (for directories).  
- `-f`: Force delete (no prompts).  
- `-i`: Interactive prompts.  

**Use Case**: Clean up files.  
**Example**:  
```bash
rm file.txt             # Delete a file
rm -rf dir/             # Delete a directory and contents (⚠️ **Dangerous!**)
```

---

### **13. `rmdir` (Remove Empty Directory)**  
**Description**: Delete empty directories.  
**Attributes**:  
- `-p`: Remove parent directories if empty.  

**Use Case**: Remove empty folders.  
**Example**:  
```bash
rmdir empty_dir         # Delete an empty directory
rmdir -p dir1/dir2      # Remove dir1 and dir2 if both are empty
```

---

### **14. `wc` (Word Count)**  
**Description**: Count lines, words, or bytes in a file.  
**Attributes**:  
- `-l`: Lines.  
- `-w`: Words.  
- `-c`: Bytes.  

**Use Case**: Analyze text files.  
**Example**:  
```bash
wc -l file.txt    # Count lines in file.txt
wc -w report.md   # Count words in report.md
```

---

### **15. `dd` (Disk Duplicator)**  
**Description**: Copy and convert raw data.  
**Attributes**:  
- `if`: Input file.  
- `of`: Output file.  
- `bs`: Block size.  
- `count`: Number of blocks.  

**Use Case**: Create disk images or test I/O performance.  
**Example**:  
```bash
dd if=/dev/zero of=test.img bs=1M count=10  # Create a 10MB file
dd if=/dev/sda of=backup.img                # Backup a disk
```

---

### **16. Hard Links vs. Soft Links**  
**Description**:  
- **Hard Link**: Direct reference to a file’s inode (same storage).  
- **Soft Link**: Shortcut pointing to another file (like a Windows shortcut).  

**Commands**:  
- `ln file.txt hardlink`: Create a hard link.  
- `ln -s file.txt softlink`: Create a soft link.  

**Use Case**: Share files without duplication (hard links) or create shortcuts (soft links).  
**Example**:  
```bash
ln -s /var/log/syslog syslog_link  # Create a soft link to syslog
ls -i file.txt hardlink            # Show identical inodes for hard links
```

---

### **17. `tail` (View End of File)**  
**Description**: Display the last part of a file.  
**Attributes**:  
- `-n <number>`: Show last N lines (default: 10).  
- `-f`: Follow updates in real-time (e.g., logs).  

**Use Case**: Monitor log files.  
**Example**:  
```bash
tail -n 20 file.log    # Show last 20 lines
tail -f /var/log/nginx/access.log  # Follow live updates
```

---

### **18. `touch` (Create File or Update Timestamp)**  
**Description**: Create empty files or update access/modification times.  
**Attributes**:  
- `-a`: Change access time only.  
- `-m`: Change modification time only.  

**Use Case**: Create placeholder files.  
**Example**:  
```bash
touch newfile.txt       # Create an empty file
touch -m existing.txt  # Update modification time
```

---

### **19. `head` (View Start of File)**  
**Description**: Display the first part of a file.  
**Attributes**:  
- `-n <number>`: Show first N lines (default: 10).  

**Use Case**: Preview a file’s beginning.  
**Example**:  
```bash
head -n 5 file.txt    # Show first 5 lines
```

---

### **20. `grep` (Search Patterns in Files)**  
**Description**: Search text using patterns (regular expressions).  
**Attributes**:  
- `-i`: Case-insensitive search.  
- `-v`: Invert match (show non-matching lines).  
- `-r`: Recursive search in directories.  
- `-n`: Show line numbers.  
- `-E`: Extended regex (e.g., `+`, `|`).  

**Use Case**: Find specific text in files.  
**Example**:  
```bash
grep "error" /var/log/syslog     # Search for "error" in syslog
grep -ri "TODO" ~/projects/     # Recursive case-insensitive search
```

---

### **Key Notes**:  
- Use `man <command>` to explore more options (e.g., `man grep`).  
- Be cautious with commands like `rm -rf` or `dd`—they can cause data loss.  
- Soft links break if the target is deleted; hard links share the same data until all links are removed.
